=========================================================================================================
											Hacking
=========================================================================================================

Basics:

1. 3 Hacking Skills

    (i) Recon (FootPrinting): Gathering Public Information

        (a) Google Hacking

            (I) Google Hacking utilizes the Gathering Public Information. Google Hacking is a sub-category of Recon

            (II) Operators `<key>:<value>`, `<key>: "<value>"`: operators are key-value pairs that can be used in google search to narrow down the search results

            (III) `-<key>`: the dash "-" right before the key represets the "NOT" actions meaning It won't include it if the value matches

            (IV) `intitle: "<title>"` searchs for pages with the specific title

                (A) Examples:-

                intitle: "webcamxp 5"

                intitle: "login"

            (V) `filetype:<ext> "<keyword>"` searchs for files with the specific type and looks for `<keyword>` in them

                (A) `filetype:env "DB_PASSWORD"` unrestricted Database Passwords

            (VI) `site:<domain>` narrows down search results to the specific site only
    
            (VII) `inurl:<keyword>`: if the URL contains "<keyword>"

            (VIII) `intext:<keyword>`: if the body of the webpage contains "<keyword>"

            (IX) https://www.exploit-db.com/google-hacking-database

2. Denial of Service (DoS) Attack
    
    (i) A Denial of Service (DoS) attack is a malicious attempt to disrupt the normal functioning of a targeted server, service, or network by overwhelming it with a flood of illegitimate traffic. The primary goal of a DoS attack is to make the targeted system or network unavailable to its intended users, causing disruption or complete shutdown of services.
    
    Here's how a typical DoS attack works:
    
    (ii) Traffic Flood: The attacker generates a massive volume of traffic or requests and directs them towards the target server or network. This flood of traffic is beyond what the target can handle, causing it to become overloaded and unable to respond to legitimate requests.
    
    (iii) Resource Exhaustion: The flood of traffic consumes the target's available resources such as bandwidth, CPU, memory, or disk space. As a result, legitimate users are unable to access the services provided by the target because all available resources are tied up dealing with the attack.
    
    (iv) Types of Attacks:
        
        (a) Volume-based attacks: These flood the target with a high volume of traffic, such as UDP flood, ICMP flood, or SYN flood.
        
        (b) Protocol Attacks: These exploit weaknesses in the protocols used to communicate between the target and the internet, such as TCP/IP or HTTP.
        
        (c) Application Layer Attacks: These attacks target vulnerabilities in the application layer protocols, aiming to exhaust server resources or crash the server.
    
    (v) Distributed Denial of Service (DDoS): In a DDoS attack, the attacker uses multiple compromised devices or systems, often referred to as a botnet, to orchestrate the attack. This makes it more challenging to mitigate the attack since the traffic comes from multiple sources, often geographically distributed.
    
    (vi) Impact: The impact of a successful DoS attack can range from mild inconvenience to severe financial loss or reputational damage for businesses and organizations. It can disrupt essential services, cause financial losses due to downtime, and damage the reputation and trust of the targeted entity.
    
    (vii) Mitigation: To defend against DoS attacks, organizations employ various mitigation strategies, including:
       
       (a) Traffic filtering and blocking: Identifying and filtering out malicious traffic at the network perimeter.
       
       (b) Rate limiting and traffic shaping: Limiting the rate of incoming requests to prevent overwhelming the system.
       
       (c) Deploying intrusion detection and prevention systems (IDS/IPS): Monitoring network traffic and blocking suspicious or malicious activity in real-time.
       
       (d) Using content delivery networks (CDNs): Distributing content across multiple servers and data centers to absorb and mitigate DDoS attacks.
    

    (viii) Types of DoS Attacks

        (a) Network DoS (Denial of Service), Application DoS, and Operational Technology (OT) DoS are all different forms of DoS attacks targeting various layers of technology infrastructure:
        
        (b) Network DoS (Denial of Service):
           
           (I) Definition: Network DoS attacks target the network infrastructure itself, aiming to overwhelm network devices, such as routers, switches, or firewalls, with a flood of traffic.
           
           (II) How it works: Attackers flood the target network with an excessive volume of data packets, exploiting vulnerabilities in network protocols or overloading network bandwidth.
           
           (III) Examples: Common types of Network DoS attacks include UDP flood, ICMP flood, SYN flood, and amplification attacks (such as DNS amplification or NTP amplification attacks).
           
           (IV) Impact: Network DoS attacks can disrupt network connectivity, making it difficult or impossible for legitimate users to access network resources or services.
        
        (c) Application DoS (Denial of Service):
           
           (I) Definition: Application DoS attacks target specific applications or services running on a server, exploiting vulnerabilities in the application layer protocols or application software.
           
           (II) How it works: Attackers send a flood of requests to the target application, consuming server resources such as CPU, memory, or disk I/O, and causing the application to become unresponsive to legitimate users.
           
           (III) Examples: Common types of Application DoS attacks include HTTP flood, Slowloris, and application-level protocol attacks targeting vulnerabilities in web servers, databases, or other application services.
           
           (IV) Impact: Application DoS attacks can disrupt the availability of web services, online applications, or databases, leading to downtime, financial losses, and damage to the organization's reputation.
        
        (d) Operational Technology (OT) DoS:
           
           (I) Definition: Operational Technology (OT) refers to the hardware and software systems used to monitor and control physical processes, such as industrial control systems (ICS), SCADA (Supervisory Control and Data Acquisition) systems, or smart grid infrastructure.
           
           (II) How it works: OT DoS attacks target critical infrastructure components, such as programmable logic controllers (PLCs) or industrial network devices, aiming to disrupt industrial processes or essential services.
           
           (III) Examples: OT DoS attacks can exploit vulnerabilities in industrial protocols, firmware, or software used in manufacturing, energy production, transportation, or other industrial sectors.
           
           (IV) Impact: OT DoS attacks can have severe consequences, including production outages, equipment damage, environmental hazards, or safety risks, leading to significant financial losses and potential threats to public safety.
        
    (ix) In summary, DoS attacks pose a significant threat to the availability and integrity of online services and networks. Defending against such attacks requires proactive measures, including robust network infrastructure, monitoring systems, and response protocols.

Social Engineering:

3. Social Engineering Toolkit (SET)

4. Phising

    (i) Step: 1, Setup

        (This step is for Debian Based Linux Operating Systems)
        
        (a) Installing git (Skip if you have Git Installed):

            sudo apt install git

        (b) Cloning repository

            git clone https://github.com/8L4NK/blackeye

        (c) Sign Up for Ngrok (Necessary for Hosting)

            https://dashboard.ngrok.com/signup

        (d) run the script:

            sudo bash ./blackeye/blackeye.sh

    (ii) Step: 2, Tricking The Vitim in to Clicking The Link

        (a) Via Email

        (b) Via SMS (Smishing)

        (c) Phone Call (Vishing)

    (iii) Types of Phising Attempts:

        (a) Mass Phishing (Attempting to Phish an Group, Organizations etc)
        (b) Spear-Phishing (Attempting to Phish a Specific Person)

        (Attempting to phish a Very Important / Powerful / Influential Person is called Whaling)

Network:

5. Nmap

    (i) Nmap (Network Mapper) is an Open-Source Project used to scan Networks for vulnerabilities and other things.

    (ii) Installation

        Debian Based:

        $ sudo apt install nmap

        (a) Source: https://nmap.org/download.html

    (iii) Syntax:

        $ nmap <ScanType> <Options> <target>

    (iv) Target:

        (a) Can pass hostnames, IP addresses, networks, etc.
            Ex: scanme.nmap.org, google.com/24, 192.168.0.1; 10.0.0-255.1-254
        (c) `-iL <inputfilename>`:                   Input from list of hosts/networks
        (d) `-iR <num hosts>`:                       Choose random targets
        (e) `--exclude <host1[,host2][,host3],...>`: Exclude hosts/networks
        (f) `--excludefile <exclude_file>`:          Exclude list from file
    
    Scan Type:

    (v) Host Discovery

        (a) `-sL` List Scan:                    simply list targets to scan (doesn't sends any TCP packets)
        (b) `-sn` Ping Scan:                    disable port scan
        (c) `-Pn` Treat all hosts as online:    skip host discovery
        (d) `-PS/PA/PU/PY[portlist]`            TCP SYN, TCP ACK, UDP or SCTP discovery to given ports
        (e) `-PE/PP/PM`                         ICMP echo, timestamp, and netmask request discovery probes
        (f) `-PO[protocol list]`                IP Protocol Ping
        (g) `-n/-R`                             Never do DNS resolution/Always resolve [default: sometimes]
        (h) `--dns-servers <serv1[,serv2],...>` Specify custom DNS servers
        (i) `--system-dns`                      Use OS's DNS resolver
        (j) `--traceroute`                      Trace hop path to each host
    
    (vi) Scan

        (a) `-sS/sT/sA/sW/sM`:               TCP SYN / Connect() / ACK / Window / Maimon scans
        (b) `-sU`:                           UDP Scan
        (c) `-sN/sF/sX`:                     TCP Null, FIN, and Xmas scans
        (d) `--scanflags <flags>`:           Customize TCP scan flags
        (e) `-sI <zombie host[:probeport]>`: Idle scan
        (f) `-sY/sZ`:                        SCTP INIT/COOKIE-ECHO scans
        (g) `-sO`:                           IP protocol scan
        (h) `-b <FTP relay host>`:           FTP bounce scan

    Options:

    (vii) Ports and Scan Order:
        
        (a) -p <port ranges>:        Only scan specified ports
            
            Ex: -p 22; -p 1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9

        (b) `--exclude-ports <port ranges>`: Exclude the specified ports from scanning
        (c) `-F`:                            Fast mode - Scan fewer ports than the default scan
        (d) `-r`:                            Scan ports sequentially - don't randomize
        (e) `--top-ports <number>`:          Scan <number> most common ports
        (f) `--port-ratio <ratio>`:          Scan ports more common than <ratio>

    (viii) Service/Version:

        (a) `-sV`:                         Probe open ports to determine service/version info
        (b) `--version-intensity <level>`: Set from 0 (light) to 9 (try all probes)
        (c) `--version-light`:             Limit to most likely probes (intensity 2)
        (d) `--version-all`:               Try every single probe (intensity 9)
        (e) `--version-trace`:             Show detailed version scan activity (for debugging)

    (ix) OS detection:

        (a) `-O`:             Enable OS detection
        (b) `--osscan-limit`: Limit OS detection to promising targets
        (c) `--osscan-guess`: Guess OS more aggressively

    (x) Performance:

        (a) Options which take <time> are in seconds, or append 'ms' (milliseconds), 's' (seconds), 'm' (minutes), or 'h' (hours) to the value (e.g. 30m).

        (b) `-T<0-5>`:                                                      Set timing template (higher is faster)
        (c) `--min-hostgroup/max-hostgroup <size>`:                         Parallel host scan group sizes
        (d) `--min-parallelism/max-parallelism <numprobes>`:                Probe parallelization
        (e) `--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>`: Specifies probe round trip time.
        (f) `--max-retries <tries>`:                                        Caps number of port scan probe retransmissions.
        (g) `--host-timeout <time>`:                                        Give up on target after this long
        (h) `--scan-delay/--max-scan-delay <time>`:                         Adjust delay between probes
        (i) `--min-rate <number>`:                                          Send packets no slower than <number> per second
        (j) `--max-rate <number>`:                                          Send packets no faster than <number> per second

    (xi) Firewall/IDS Evasion and Spoofing:

        (a) `-f; --mtu <val>`:                              fragment packets (optionally w/given MTU)
        (b) `-D <decoy1,decoy2[,ME],...>`:                  Cloak a scan with decoys
        (c) `-S <IP_Address>`:                              Spoof source address
        (d) `-e <iface>`:                                   Use specified interface
        (e) `-g/--source-port <portnum>`:                   Use given port number
        (f) `--proxies <url1,[url2],...>`:                  Relay connections through HTTP/SOCKS4 proxies
        (g) `--data <hex string>`:                          Append a custom payload to sent packets
        (h) `--data-string <string>`:                       Append a custom ASCII string to sent packets
        (i) `--data-length <num>`:                          Append random data to sent packets
        (j) `--ip-options <options>`:                       Send packets with specified ip options
        (k) `--ttl <val>`:                                  Set IP time-to-live field
        (l) `--spoof-mac <mac address/prefix/vendor name>`: Spoof your MAC address
        (m) `--badsum`:                                     Send packets with a bogus TCP/UDP/SCTP checksum

    (xii) SCRIPT SCAN:

        (a) `-sC`:                               equivalent to --script=default
        (a) `--script <name>`:                   runs one of the automated hacking scripts listed at https://nmap.org/nsedoc/scripts/

            $ sudo nmap --script vuln 192.168.1.1

        (b) `--script=<Lua scripts>`:            <Lua scripts> is a comma separated list of directories, script-files or script-categories
        (c) `--script-args=<n1=v1,[n2=v2,...]>`: provide arguments to scripts
        (d) `--script-args-file=filename`:       provide NSE script args in a file
        (e) `--script-trace`:                    Show all data sent and received
        (f) `--script-updatedb`:                 Update the script database.
        (g) `--script-help=<Lua scripts>`:       Show help about scripts.
        
        (h) <Lua scripts> is a comma-separated list of script-files orscript-categories.

    (xiii) OUTPUT:

        (a) `-oN/-oX/-oS/-oG <file>`:  Output scan in normal, XML, s|<rIpt kIddi3, and Grepable format, respectively, to the given filename.
        (b) `-oA <basename>`:          Output in the three major formats at once
        (c) `-v`:                      Increase verbosity level (use -vv or more for greater effect)
        (d) `-d`:                      Increase debugging level (use -dd or more for greater effect)
        (e) `--reason`:                Display the reason a port is in a particular state
        (f) `--open`:                  Only show open (or possibly open) ports
        (g) `--packet-trace`:          Show all packets sent and received
        (h) `--iflist`:                Print host interfaces and routes (for debugging)
        (i) `--append-output`:         Append to rather than clobber specified output files
        (j) `--resume <filename>`:     Resume an aborted scan
        (k) `--noninteractive`:        Disable runtime interactions via keyboard
        (l) `--stylesheet <path/URL>`: XSL stylesheet to transform XML output to HTML
        (m) `--webxml`:                Reference stylesheet from Nmap.Org for more portable XML
        (n) `--no-stylesheet`:         Prevent associating of XSL stylesheet w/XML output

    Other:

    (x) Misc

        (a) `-6`:                   Enable IPv6 scanning
        (b) `-A`:                   Enable OS detection, version detection, script scanning, and traceroute
        (c) `--datadir <dirname>`:  Specify custom Nmap data file location
        (d) `--send-eth/--send-ip`: Send using raw ethernet frames or IP packets
        (e) `--privileged`:         Assume that the user is fully privileged
        (f) `--unprivileged`:       Assume the user lacks raw socket privileges
        (g) `-V`:                   Print version number
        (h) `-h`:                   Print this help summary page.

    (xi) Examples:-

        $ nmap -v -A scanme.nmap.org

        $ nmap -v -sn 192.168.0.0/16 10.0.0.0/8

        $ nmap -v -iR 10000 -Pn -p 80

