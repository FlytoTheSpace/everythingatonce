=========================================================================================================
											Hacking
=========================================================================================================

Basics:

1. Recon (FootPrinting): Gathering Public Information

    (i) OSINIT https://osintframework.com/

    (ii) Google Hacking

        (a) Google Hacking utilizes the Gathering Public Information. Google Hacking is a sub-category of Recon
        (b) Operators `<key>:<value>`, `<key>: "<value>"`: operators are key-value pairs that can be used in google search to narrow down the search results
        (c) `-<key>`: the dash "-" right before the key represets the "NOT" actions meaning It won't include it if the value matches
        (d) `intitle: "<title>"` searchs for pages with the specific title

            (A) Examples:-

            intitle: "webcamxp 5"

            intitle: "login"

        (f) `filetype:<ext> "<keyword>"` searchs for files with the specific type and looks for `<keyword>` in them

            (I) `filetype:env "DB_PASSWORD"` unrestricted Database Passwords

        (g) `site:<domain>` narrows down search results to the specific site only
        (h) `inurl:<keyword>`: if the URL contains "<keyword>"
        (i) `intext:<keyword>`: if the body of the webpage contains "<keyword>"
        (j) https://www.exploit-db.com/google-hacking-database


2. Denial of Service 
    
    (i) A Denial of Service (DoS) attack is a malicious attempt to disrupt the normal functioning of a targeted server, service, or network by overwhelming it with a flood of illegitimate traffic. The primary goal of a DoS attack is to make the targeted system or network unavailable to its intended users, causing disruption or complete shutdown of services.
    
    Here's how a typical DoS attack works:
    
    (ii) Traffic Flood: The attacker generates a massive volume of traffic or requests and directs them towards the target server or network. This flood of traffic is beyond what the target can handle, causing it to become overloaded and unable to respond to legitimate requests.
    
    (iii) Resource Exhaustion: The flood of traffic consumes the target's available resources such as bandwidth, CPU, memory, or disk space. As a result, legitimate users are unable to access the services provided by the target because all available resources are tied up dealing with the attack.
    
    (iv) Types of Attacks:
        
        (a) Volume-based attacks: These flood the target with a high volume of traffic, such as UDP flood, ICMP flood, or SYN flood.
        
        (b) Protocol Attacks: These exploit weaknesses in the protocols used to communicate between the target and the internet, such as TCP/IP or HTTP.
        
        (c) Application Layer Attacks: These attacks target vulnerabilities in the application layer protocols, aiming to exhaust server resources or crash the server.
    
    (v) Distributed Denial of Service (DDoS): In a DDoS attack, the attacker uses multiple compromised devices or systems, often referred to as a botnet, to orchestrate the attack. This makes it more challenging to mitigate the attack since the traffic comes from multiple sources, often geographically distributed.
    
    (vi) Impact: The impact of a successful DoS attack can range from mild inconvenience to severe financial loss or reputational damage for businesses and organizations. It can disrupt essential services, cause financial losses due to downtime, and damage the reputation and trust of the targeted entity.
    
    (vii) Mitigation: To defend against DoS attacks, organizations employ various mitigation strategies, including:
       
       (a) Traffic filtering and blocking: Identifying and filtering out malicious traffic at the network perimeter.
       
       (b) Rate limiting and traffic shaping: Limiting the rate of incoming requests to prevent overwhelming the system.
       
       (c) Deploying intrusion detection and prevention systems (IDS/IPS): Monitoring network traffic and blocking suspicious or malicious activity in real-time.
       
       (d) Using content delivery networks (CDNs): Distributing content across multiple servers and data centers to absorb and mitigate DDoS attacks.
    

    (viii) Types of DoS Attacks

        (a) Network DoS (Denial of Service), Application DoS, and Operational Technology (OT) DoS are all different forms of DoS attacks targeting various layers of technology infrastructure:
        
        (b) Network DoS (Denial of Service):
           
           (I) Definition: Network DoS attacks target the network infrastructure itself, aiming to overwhelm network devices, such as routers, switches, or firewalls, with a flood of traffic.
           
           (II) How it works: Attackers flood the target network with an excessive volume of data packets, exploiting vulnerabilities in network protocols or overloading network bandwidth.
           
           (III) Examples: Common types of Network DoS attacks include UDP flood, ICMP flood, SYN flood, and amplification attacks (such as DNS amplification or NTP amplification attacks).
           
           (IV) Impact: Network DoS attacks can disrupt network connectivity, making it difficult or impossible for legitimate users to access network resources or services.
        
        (c) Application DoS (Denial of Service):
           
           (I) Definition: Application DoS attacks target specific applications or services running on a server, exploiting vulnerabilities in the application layer protocols or application software.
           
           (II) How it works: Attackers send a flood of requests to the target application, consuming server resources such as CPU, memory, or disk I/O, and causing the application to become unresponsive to legitimate users.
           
           (III) Examples: Common types of Application DoS attacks include HTTP flood, Slowloris, and application-level protocol attacks targeting vulnerabilities in web servers, databases, or other application services.
           
           (IV) Impact: Application DoS attacks can disrupt the availability of web services, online applications, or databases, leading to downtime, financial losses, and damage to the organization's reputation.
        
        (d) Operational Technology (OT) DoS:
           
           (I) Definition: Operational Technology (OT) refers to the hardware and software systems used to monitor and control physical processes, such as industrial control systems (ICS), SCADA (Supervisory Control and Data Acquisition) systems, or smart grid infrastructure.
           
           (II) How it works: OT DoS attacks target critical infrastructure components, such as programmable logic controllers (PLCs) or industrial network devices, aiming to disrupt industrial processes or essential services.
           
           (III) Examples: OT DoS attacks can exploit vulnerabilities in industrial protocols, firmware, or software used in manufacturing, energy production, transportation, or other industrial sectors.
           
           (IV) Impact: OT DoS attacks can have severe consequences, including production outages, equipment damage, environmental hazards, or safety risks, leading to significant financial losses and potential threats to public safety.
        
    (ix) In summary, DoS attacks pose a significant threat to the availability and integrity of online services and networks. Defending against such attacks requires proactive measures, including robust network infrastructure, monitoring systems, and response protocols.

Social Engineering:

3. Social Engineering Toolkit (SET)

4. Phising

    (i) Step: 1, Setup

        (This step is for Debian Based Linux Operating Systems)
        
        (a) Installing git (Skip if you have Git Installed):

            sudo apt install git

        (b) Cloning repository

            git clone https://github.com/8L4NK/blackeye

        (c) Sign Up for Ngrok (Necessary for Hosting)

            https://dashboard.ngrok.com/signup

        (d) run the script:

            sudo bash ./blackeye/blackeye.sh

    (ii) Step: 2, Tricking The Vitim in to Clicking The Link

        (a) Via Email

        (b) Via SMS (Smishing)

        (c) Phone Call (Vishing)

    (iii) Types of Phising Attempts:

        (a) Mass Phishing (Attempting to Phish an Group, Organizations etc)
        (b) Spear-Phishing (Attempting to Phish a Specific Person)

        (Attempting to phish a Very Important / Powerful / Influential Person is called Whaling)

Network:

5. Nmap

    (i) Nmap (Network Mapper) is an Open-Source Project used to scan Networks for vulnerabilities and other things.

    (ii) Installation

        Debian Based:

        $ sudo apt install nmap

        (a) Source: https://nmap.org/download.html

    (iii) Syntax:

        $ nmap <ScanType> <Options> <target>

    (iv) Target:

        (a) Can pass hostnames, IP addresses, networks, etc.
            Ex: scanme.nmap.org, google.com/24, 192.168.0.1; 10.0.0-255.1-254
        (c) `-iL <inputfilename>`:                   Input from list of hosts/networks
        (d) `-iR <num hosts>`:                       Choose random targets
        (e) `--exclude <host1[,host2][,host3],...>`: Exclude hosts/networks
        (f) `--excludefile <exclude_file>`:          Exclude list from file
    
    Scan Type:

    (v) Host Discovery

        (a) `-sL` List Scan:                    simply list targets to scan (doesn't sends any TCP packets)
        (b) `-sn` Ping Scan:                    disable port scan
        (c) `-Pn` Treat all hosts as online:    skip host discovery
        (d) `-PS/PA/PU/PY[portlist]`            TCP SYN, TCP ACK, UDP or SCTP discovery to given ports
        (e) `-PE/PP/PM`                         ICMP echo, timestamp, and netmask request discovery probes
        (f) `-PO[protocol list]`                IP Protocol Ping
        (g) `-n/-R`                             Never do DNS resolution/Always resolve [default: sometimes]
        (h) `--dns-servers <serv1[,serv2],...>` Specify custom DNS servers
        (i) `--system-dns`                      Use OS's DNS resolver
        (j) `--traceroute`                      Trace hop path to each host
    
    (vi) Scan

        (a) `-sS/sT/sA/sW/sM`:               TCP SYN / Connect() / ACK / Window / Maimon scans
        (b) `-sU`:                           UDP Scan
        (c) `-sN/sF/sX`:                     TCP Null, FIN, and Xmas scans
        (d) `--scanflags <flags>`:           Customize TCP scan flags
        (e) `-sI <zombie host[:probeport]>`: Idle scan
        (f) `-sY/sZ`:                        SCTP INIT/COOKIE-ECHO scans
        (g) `-sO`:                           IP protocol scan
        (h) `-b <FTP relay host>`:           FTP bounce scan

    Options:

    (vii) Ports and Scan Order:
        
        (a) -p <port ranges>:        Only scan specified ports
            
            Ex: -p 22; -p 1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9

        (b) `--exclude-ports <port ranges>`: Exclude the specified ports from scanning
        (c) `-F`:                            Fast mode - Scan fewer ports than the default scan
        (d) `-r`:                            Scan ports sequentially - don't randomize
        (e) `--top-ports <number>`:          Scan <number> most common ports
        (f) `--port-ratio <ratio>`:          Scan ports more common than <ratio>

    (viii) Service/Version:

        (a) `-sV`:                         Probe open ports to determine service/version info
        (b) `--version-intensity <level>`: Set from 0 (light) to 9 (try all probes)
        (c) `--version-light`:             Limit to most likely probes (intensity 2)
        (d) `--version-all`:               Try every single probe (intensity 9)
        (e) `--version-trace`:             Show detailed version scan activity (for debugging)

    (ix) OS detection:

        (a) `-O`:             Enable OS detection
        (b) `--osscan-limit`: Limit OS detection to promising targets
        (c) `--osscan-guess`: Guess OS more aggressively

    (x) Performance:

        (a) Options which take <time> are in seconds, or append 'ms' (milliseconds), 's' (seconds), 'm' (minutes), or 'h' (hours) to the value (e.g. 30m).

        (b) `-T<0-5>`:                                                      Set timing template (higher is faster)
        (c) `--min-hostgroup/max-hostgroup <size>`:                         Parallel host scan group sizes
        (d) `--min-parallelism/max-parallelism <numprobes>`:                Probe parallelization
        (e) `--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>`: Specifies probe round trip time.
        (f) `--max-retries <tries>`:                                        Caps number of port scan probe retransmissions.
        (g) `--host-timeout <time>`:                                        Give up on target after this long
        (h) `--scan-delay/--max-scan-delay <time>`:                         Adjust delay between probes
        (i) `--min-rate <number>`:                                          Send packets no slower than <number> per second
        (j) `--max-rate <number>`:                                          Send packets no faster than <number> per second

    (xi) Firewall/IDS Evasion and Spoofing:

        (a) `-f; --mtu <val>`:                              fragment packets (optionally w/given MTU)
        (b) `-D <decoy1,decoy2[,ME],...>`:                  Cloak a scan with decoys
        (c) `-S <IP_Address>`:                              Spoof source address
        (d) `-e <iface>`:                                   Use specified interface
        (e) `-g/--source-port <portnum>`:                   Use given port number
        (f) `--proxies <url1,[url2],...>`:                  Relay connections through HTTP/SOCKS4 proxies
        (g) `--data <hex string>`:                          Append a custom payload to sent packets
        (h) `--data-string <string>`:                       Append a custom ASCII string to sent packets
        (i) `--data-length <num>`:                          Append random data to sent packets
        (j) `--ip-options <options>`:                       Send packets with specified ip options
        (k) `--ttl <val>`:                                  Set IP time-to-live field
        (l) `--spoof-mac <mac address/prefix/vendor name>`: Spoof your MAC address
        (m) `--badsum`:                                     Send packets with a bogus TCP/UDP/SCTP checksum

    (xii) SCRIPT SCAN:

        (a) `-sC`:                               equivalent to --script=default
        (a) `--script <name>`:                   runs one of the automated hacking scripts listed at https://nmap.org/nsedoc/scripts/

            $ sudo nmap --script vuln 192.168.1.1

        (b) `--script=<Lua scripts>`:            <Lua scripts> is a comma separated list of directories, script-files or script-categories
        (c) `--script-args=<n1=v1,[n2=v2,...]>`: provide arguments to scripts
        (d) `--script-args-file=filename`:       provide NSE script args in a file
        (e) `--script-trace`:                    Show all data sent and received
        (f) `--script-updatedb`:                 Update the script database.
        (g) `--script-help=<Lua scripts>`:       Show help about scripts.
        
        (h) <Lua scripts> is a comma-separated list of script-files orscript-categories.

    (xiii) OUTPUT:

        (a) `-oN/-oX/-oS/-oG <file>`:  Output scan in normal, XML, s|<rIpt kIddi3, and Grepable format, respectively, to the given filename.
        (b) `-oA <basename>`:          Output in the three major formats at once
        (c) `-v`:                      Increase verbosity level (use -vv or more for greater effect)
        (d) `-d`:                      Increase debugging level (use -dd or more for greater effect)
        (e) `--reason`:                Display the reason a port is in a particular state
        (f) `--open`:                  Only show open (or possibly open) ports
        (g) `--packet-trace`:          Show all packets sent and received
        (h) `--iflist`:                Print host interfaces and routes (for debugging)
        (i) `--append-output`:         Append to rather than clobber specified output files
        (j) `--resume <filename>`:     Resume an aborted scan
        (k) `--noninteractive`:        Disable runtime interactions via keyboard
        (l) `--stylesheet <path/URL>`: XSL stylesheet to transform XML output to HTML
        (m) `--webxml`:                Reference stylesheet from Nmap.Org for more portable XML
        (n) `--no-stylesheet`:         Prevent associating of XSL stylesheet w/XML output

    Other:

    (x) Misc

        (a) `-6`:                   Enable IPv6 scanning
        (b) `-A`:                   Enable OS detection, version detection, script scanning, and traceroute
        (c) `--datadir <dirname>`:  Specify custom Nmap data file location
        (d) `--send-eth/--send-ip`: Send using raw ethernet frames or IP packets
        (e) `--privileged`:         Assume that the user is fully privileged
        (f) `--unprivileged`:       Assume the user lacks raw socket privileges
        (g) `-V`:                   Print version number
        (h) `-h`:                   Print this help summary page.

    (xi) Examples:-

        $ nmap -v -A scanme.nmap.org

        $ nmap -v -sn 192.168.0.0/16 10.0.0.0/8

        $ nmap -v -iR 10000 -Pn -p 80

6. Proxy Chaining

    (i) Proxy chains are sequences of proxy servers through which internet traffic is routed to enhance privacy and anonymity. Each server in the chain forwards the data to the next, masking the original source IP address. This layered approach makes it harder to trace the user's online activity.

    (ii) Setup

        (Requires an Hacking OS like Kali Linux or Parrot OS)

        (a) Locate the `proxychains` config file on your system

            $ locate proxychains
            /etc/proxychains4.conf
            /etc/alternatives/proxychains
            /etc/alternatives/proxychains.1.gz
            /usr/bin/proxychains
            ...

            (I) the first line of the output will be the file

        (b) Edit The file:

            $ nano /etc/proxychains4.conf

        Configuration:

        (c) Pick one of 3 Proxy Options

            (I) dynamic_chain: Chains all the Proxy's Together to make the set inbetween you and the Internet (unless one of the is not available then it just skips it over)

            (II) strict_chain: (For Later...)

            (III) random_chain: picks a random proxy from the proxy list and lets it sit in-between you and the internet (It doesn't chain proxies Together but keeps them guessing)

            (IV) `proxychains4.conf`:

                dynamic_chain
                #strict_chain
                #random_chain

            (add a Hashtag "#" as the first character of that line disables it)

        (d) `proxy_dns` Proxies your DNS request (Enabled by default). `proxychains4.conf`:

            dynamic_chain
            #strict_chain
            #random_chain

            proxy_dns

        (e) Adding Proxies

            (I) under `[Proxylist]` add proxies with the following format:

            `<type> <IP> <Port> <username?> <password?>`

            (II) type can be on of these: "http", "https", "socks4", "socks5" and "raw"

            (III) <IP> will be the IP address of the Proxy

            (IV) <username?> and <password?> are only required if the proxy requires them otherwise they are not needed

            (V) `proxychains4.conf`:

                dynamic_chain
                #strict_chain
                #random_chain

                proxy_dns

                remote_dns_subnet 224
                tcp_read_time_out 15000
                tcp_connect_time_out 8000

                [Proxylist]
                socks4 121.175.250.164 3128
                socks4 88.255.64.83 1080
                socks4 200.108.190.110 9800
                http 109.230.72.236 8080

            (VI) TOR the Onion Router: add `socks4 127.0.0.1 9050` to the list of Proxylist to use the Tor Onion Router (requires Tor Service to be enabled)

        (f) Finalized config:

            dynamic_chain
            #strict_chain
            #random_chain

            proxy_dns

            remote_dns_subnet 224
            tcp_read_time_out 15000
            tcp_connect_time_out 8000

            [Proxylist]
            socks4 121.175.250.164 3128
            socks4 88.255.64.83 1080
            socks4 200.108.190.110 9800
            http 109.230.72.236 8080

    (iii) Using Proxychains
        
        (a) `proxychains <cmd>` runs the specified command with the proxychains

            $ proxychains firefox google.com
            $ proxychains ping google.com
            $ proxychains nmap -sT -p 80,443 192.168.0.1

    (iv) How to find proxy server?

        (a) Just google it: https://www.google.com/search?q=free+proxy+server+list

        (b) Too Lazy to Search? here:

            (Non-Associated)
            https://geonode.com/free-proxy-list
            https://netnut.io/free-proxy-list/
            https://spys.one/

7. 
Brute Force:

7. Passwords

    (i) Cracking Hashes

        (a) Hashcat

            (I) About
                
                (A) hashcat - Advanced CPU-based password recovery utility
                (B) Hashcat is the world’s fastest CPU-based password recovery tool.
                (C) While it's not as fast as its GPU counterpart oclHashcat, large lists can be easily split in half with a good dictionary and a bit of knowledge of the command switches.
                (D) Hashcat is the self-proclaimed world’s fastest CPU-based password recovery tool, Examples of hashcat supported hashing algorithms are Microsoft LM Hashes, MD4, MD5, SHA-family, Unix Crypt formats, MySQL, Cisco PIX.

            (II) Syntax:

                $ hashcat <options> <hash (String or File)> <worldlist>

            (III) Options

                General:

                (A) `-h`, `--help`: Show summary of options.
                (B) `-V`, `--version`: Show version of program.

                Important:

                (C) `-a`, `--attack-mode=NUM`: Attack-mode, see references below
                (D) `-m`, `--hash-type=NUM`: Hash-type, see references below

                Options:

                (E) `-b`, `--benchmark`: Run benchmark
                (F) `-c`, `--segment-size=NUM`: Size in MB to cache from the wordfile
                (G) `-d`, `--opencl-devices=STR`: OpenCL devices to use, separated with commas
                (H) `-D`, `--opencl-device-types=STR`: OpenCL device-types to use, separated with commas
                (I) `-g`, `--generate-rules=NUM`: Generate NUM random rules
                (J) `-I`, `--opencl-info`: Show info about detected OpenCL platforms/devices
                (K) `-j`, `--rule-left RULE`: Single rule applied to each word from left wordlist
                (L) `-k`, `--rule-right RULE`: Single rule applied to each word from right wordlist
                (M) `-l`, `--limit=NUM`: Limit X words from the start + skipped words
                (N) `-n`, `--kernel-accel=NUM`: Manual workload tuning, set outerloop step size to X
                (O) `-o`, `--outfile=FILE`: Define outfile for recovered hash
                (P) `-O`, `--optimized-kernel-enable`: Enable optimized kernels (limits password length)
                (Q) `-p`, `--separator=CHAR`: Define separator char for hashlists/outfile
                (R) `-r`, `--rules-file=FILE`: Rules-file use: -r 1.rule
                (S) `-s`, `--skip=NUM`: Skip X words from the start
                (T) `-S`, `--slow-candidates`: Enable slower (but advanced) candidate generators
                (U) `-t`, `--markov-threshold`: Threshold X when to stop accepting new markov-chains
                (V) `-T`, `--kernel-threads=NUM`: Manual workload tuning, set thread count to X
                (W) `-u`, `--kernel-loops=NUM`: Manual workload tuning, set innerloop step size to X
                (X) `-w`, `--workload-profile=NUM`: Enable a specific workload profile, see pool below
                (Y) `-z`, `--brain-client`: Enable brain client, activates -S

                Character Set:

                (Z) `-1, --custom-charset1=CS`: User-defined charsets example --custom-charset1=?dabcdef : sets charset ?1 to 0123456789abcdef -1 mycharset.hcchr : sets charset ?1 to chars contained in file
                (ZA) `-2, --custom-charset2=CS`: User-defined charsets example --custom-charset2=?dabcdef : sets charset ?2 to 0123456789abcdef -2 mycharset.hcchr : sets charset ?2 to chars con$
                (ZB) `-3, --custom-charset3=CS`: User-defined charsets example --custom-charset3=?dabcdef : sets charset ?3 to 0123456789abcdef -3 mycharset.hcchr : sets charset ?3 to chars con$
                (ZC) `-4, --custom-charset4=CS`: User-defined charsets example --custom-charset4=?dabcdef : sets charset ?4 to 0123456789abcdef -4 mycharset.hcchr : sets charset ?4 to chars con$
                
                All Options:

                () `--quiet`: Suppress output
                () `--force`: Ignore warnings
                () `--stdin-timeout-abort`: Abort if there is no input from stdin for X seconds
                () `--machine-readable`: Display the status view in a machine-readable format
                () `--keep-guessing`: Keep guessing the hash after it has been cracked
                () `--self-test-disable`: Disable self-test functionality on startup
                () `--loopback`: Add new plains to induct directory
                () `--hex-salt`: Assume salt is given in hex
                () `--hex-charset`: Assume charset is given in hex
                () `--hex-wordlist`: Assume words in wordlist are given in hex
                () `--runtime=NUM`: Abort session after NUM seconds of runtime
                () `--status`: Enable automatic update of the status-screen
                () `--status-timer=NUM`: Seconds between status-screen update
                () `--outfile-format=NUM`: Define outfile-format for recovered hash, see references below
                () `--outfile-autohex-disable`: Disable the use of $HEX[] in output plains
                () `--show` Show cracked passwords only (see --username)
                () `--left` Show uncracked passwords only (see --username)
                () `--username`: Enable ignoring of usernames in hashfile (Recommended: also use --show)
                () `--remove`: Enable remove of hash once it is cracked
                () `--stdout`: Stdout mode
                () `--potfile-disable`: Do not write potfile
                () `--debug-mode=NUM`: Defines the debug mode (hybrid only by using rules), see references below
                () `--debug-file=FILE`: Output file for debugging rules (see --debug-mode)
                () `--generate-rules-func-min=NUM`: Force NUM functions per random rule min
                () `--generate-rules-func-max=NUM`: Force NUM functions per random rule max
                () `--generate-rules-seed=NUM`: Force RNG seed to NUM
                () `--increment`: Enable increment mode
                () `--increment-min=NUM`: Start incrementing at NUM
                () `--increment-max=NUM`: Stop incrementing at NUM
                () `--markov-hcstat2`: Specify hcstat2 file to use
                () `--markov-disable`: Disables markov-chains, emulates classic brute-force
                () `--markov-classic`: Enables classic markov-chains, no per-position
                () `--session=STR`: Define specific session name
                () `--restore`: Restore session from --session
                () `--restore-disable`: Do not write restore file
                () `--restore-file-path=FILE`: Specific path to restore file
                () `--outfile-check-timer=NUM`: Sets seconds between outfile checks to X
                () `--wordlist-autohex-disable`: Disable the conversion of $HEX[] from the wordlist
                () `--remove-timer=NUM`: Update input hash file each X seconds
                () `--potfile-path=FILE`: Specific path to potfile
                () `--encoding-from=CODE`: Force internal wordlist encoding from X
                () `--encoding-to=CODE`: Force internal wordlist encoding to X
                () `--induction-dir=DIR`: Specify the induction directory to use for loopback
                () `--outfile-check-dir=DIR`: Specify the outfile directory to monitor for plains
                () `--logfile-disable`: Disable the logfile
                () `--hccapx-message-pair=NUM`: Load only message pairs from hccapx matching X
                () `--nonce-error-corrections=NUM`: The BF size range to replace AP's nonce last bytes
                () `--keyboard-layout-mapping=FILE`: Keyboard layout mapping table for special hash-modes
                () `--truecrypt-keyfiles=FILE`: Keyfiles to use, separated with commas
                () `--veracrypt-keyfiles=FILE`: Keyfiles to use, separated with commas
                () `--veracrypt-pim=NUM`: VeraCrypt personal iterations multiplier
                () `--benchmark-all`: Run benchmark of all hash-modes
                () `--speed-only`: Return expected speed of the attack, then quit
                () `--progress-only`: Return ideal progress step size and time to process
                () `--bitmap-min=NUM`: Sets minimum bits allowed for bitmaps to X
                () `--bitmap-max=NUM`: Sets maximum bits allowed for bitmaps to X
                () `--cpu-affinity=STR`: Locks to CPU devices, separated with commas
                () `--example-hashes`: Show an example hash for each hash-mode
                () `--opencl-platforms=STR`: OpenCL platforms to use, separated with commas
                () `--opencl-vector-width=NUM`: Manually override OpenCL vector-width to X
                () `--spin-damp=NUM`: Use CPU for device synchronization, in percent
                () `--hwmon-disable`: Disable temperature and fanspeed reads and triggers
                () `--hwmon-temp-abort=NUM`: Abort if temperature reaches X degrees Celsius
                () `--scrypt-tmto=NUM`: Manually override TMTO value for scrypt to X
                () `--keyspace`: Show keyspace base:mod values and quit
                () `--brain-server`: Enable brain server
                () `--brain-client-features=NUM`: Define brain client features, see below
                () `--brain-host=STR`: Brain server host (IP or domain)
                () `--brain-port=PORT`: Brain server port
                () `--brain-password=STR`: Brain server authentication password
                () `--brain-session=HEX`: Overrides automatically calculated brain session
                () `--brain-session-whitelist=HEX`: Allow given sessions only, separated with commas

            (IV) Permutation attack-mode options Outfile formats (`-o`)

                1 = hash[:salt]
                2 = plain
                3 = hash[:salt]:plain
                4 = hex_plain
                5 = hash[:salt]:hex_plain
                6 = plain:hex_plain
                7 = hash[:salt]:plain:hex_plain
                8 = crackpos
                9 = hash[:salt]:crack_pos
                10 = plain:crack_pos
                11 = hash[:salt]:plain:crack_pos
                12 = hex_plain:crack_pos
                13 = hash[:salt]:hex_plain:crack_pos
                14 = plain:hex_plain:crack_pos
                15 = hash[:salt]:plain:hex_plain:crack_pos

            (V) Debug mode output formats (for hybrid mode only, by using rules)

                1 = save finding rule
                2 = save original word
                3 = save original word and finding rule
                4 = save original word, finding rule and modified plain

            (VI) Built-in charsets

                ?l = abcdefghijklmnopqrstuvwxyz
                ?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ
                ?d = 0123456789
                ?h = 0123456789abcdef
                ?H = 0123456789ABCDEF
                ?s =  !"#$%&'()*+,-./:;<=>?@[]^_`{|}~
                ?a = ?l?u?d?s
                ?b = 0x00 - 0xff

            (VII) Attack mode (`-a`)
                   0 = Straight
                   1 = Combination
                   3 = Brute-force
                   6 = Hybrid Wordlist + Mask
                   7 = Hybrid Mask + Wordlist

            (VIII) Hash types (`-m`)

                0 = MD5
                10 = md5($pass.$salt)
                20 = md5($salt.$pass)
                30 = md5(unicode($pass).$salt)
                40 = md5($salt.unicode($pass))
                50 = HMAC-MD5 (key = $pass)
                60 = HMAC-MD5 (key = $salt)
                100 = SHA1
                110 = sha1($pass.$salt)
                120 = sha1($salt.$pass)
                130 = sha1(unicode($pass).$salt)
                140 = sha1($salt.unicode($pass))
                150 = HMAC-SHA1 (key = $pass)
                160 = HMAC-SHA1 (key = $salt)
                200 = MySQL323
                300 = MySQL4.1/MySQL5
                400 = phpass, MD5(Wordpress), MD5(phpBB3), MD5(Joomla)
                500 = md5crypt, MD5(Unix), FreeBSD MD5, Cisco-IOS MD5
                900 = MD4
                1000 = NTLM
                1100 = Domain Cached Credentials (DCC), MS Cache
                1400 = SHA256
                1410 = sha256($pass.$salt)
                1420 = sha256($salt.$pass)
                1430 = sha256(unicode($pass).$salt)
                1431 = base64(sha256(unicode($pass)))
                1440 = sha256($salt.unicode($pass))
                1450 = HMAC-SHA256 (key = $pass)
                1460 = HMAC-SHA256 (key = $salt)
                1600 = md5apr1, MD5(APR), Apache MD5
                1700 = SHA512
                1710 = sha512($pass.$salt)
                1720 = sha512($salt.$pass)
                1730 = sha512(unicode($pass).$salt)
                1740 = sha512($salt.unicode($pass))
                1750 = HMAC-SHA512 (key = $pass)
                1760 = HMAC-SHA512 (key = $salt)
                1800 = SHA-512(Unix)
                2400 = Cisco-PIX MD5
                2410 = Cisco-ASA MD5
                2500 = WPA/WPA2
                2600 = Double MD5
                3200 = bcrypt, Blowfish(OpenBSD)
                3300 = MD5(Sun)
                3500 = md5(md5(md5($pass)))
                3610 = md5(md5($salt).$pass)
                3710 = md5($salt.md5($pass))
                3720 = md5($pass.md5($salt))
                3800 = md5($salt.$pass.$salt)
                3910 = md5(md5($pass).md5($salt))
                4010 = md5($salt.md5($salt.$pass))
                4110 = md5($salt.md5($pass.$salt))
                4210 = md5($username.0.$pass)
                4300 = md5(strtoupper(md5($pass)))
                4400 = md5(sha1($pass))
                4500 = Double SHA1
                4600 = sha1(sha1(sha1($pass)))
                4700 = sha1(md5($pass))
                4800 = MD5(Chap), iSCSI CHAP authentication
                4900 = sha1($salt.$pass.$salt)
                5000 = SHA-3(Keccak)
                5100 = Half MD5
                5200 = Password Safe SHA-256
                5300 = IKE-PSK MD5
                5400 = IKE-PSK SHA1
                5500 = NetNTLMv1-VANILLA / NetNTLMv1-ESS
                5600 = NetNTLMv2
                5700 = Cisco-IOS SHA256
                5800 = Android PIN
                6300 = AIX {smd5}
                6400 = AIX {ssha256}
                6500 = AIX {ssha512}
                6700 = AIX {ssha1}
                6900 = GOST, GOST R 34.11-94
                7000 = Fortigate (FortiOS)
                7100 = OS X v10.8+
                7200 = GRUB 2
                7300 = IPMI2 RAKP HMAC-SHA1
                7400 = sha256crypt, SHA256(Unix)
                7900 = Drupal7
                8400 = WBB3, Woltlab Burning Board 3
                8900 = scrypt
                9200 = Cisco $8$
                9300 = Cisco $9$
                9800 = Radmin2
                10000 = Django (PBKDF2-SHA256)
                10200 = Cram MD5
                10300 = SAP CODVN H (PWDSALTEDHASH) iSSHA-1
                11000 = PrestaShop
                11100 = PostgreSQL Challenge-Response Authentication (MD5)
                11200 = MySQL Challenge-Response Authentication (SHA1)
                11400 = SIP digest authentication (MD5)
                99999 = Plaintext

            (IX) Specific hash type
                11 = Joomla < 2.5.18
                12 = PostgreSQL
                21 = osCommerce, xt:Commerce
                23 = Skype
                101 = nsldap, SHA-1(Base64), Netscape LDAP SHA
                111 = nsldaps, SSHA-1(Base64), Netscape LDAP SSHA
                112 = Oracle S: Type (Oracle 11+)
                121 = SMF > v1.1
                122 = OS X v10.4, v10.5, v10.6
                123 = EPi
                124 = Django (SHA-1)
                131 = MSSQL(2000)
                132 = MSSQL(2005)
                133 = PeopleSoft
                141 = EPiServer 6.x < v4
                1421 = hMailServer
                1441 = EPiServer 6.x > v4
                1711 = SSHA-512(Base64), LDAP {SSHA512}
                1722 = OS X v10.7
                1731 = MSSQL(2012 & 2014)
                2611 = vBulletin < v3.8.5
                2612 = PHPS
                2711 = vBulletin > v3.8.5
                2811 = IPB2+, MyBB1.2+
                3711 = Mediawiki B type
                3721 = WebEdition CMS
                7600 = Redmine Project Management Web App

    (ii) Online Attack

        (a) Hydra:

            (I) About:

                (A) hydra - A network logon cracker which supports many different services
                (B) Hydra is a parallelized login cracker which supports numerous protocols to attack. New modules are easy to add, beside that, it is flexible and very fast.
                (C) supported Service protocols:

                    I. adam6500
                    II. afp
                    III. asterisk
                    IV. cisco
                    V. cisco-enable
                    VI. cvs
                    VII. firebird
                    VIII. ftp
                    IX. ftps
                    X. http[s]-{head|get|post}
                    XI. http[s]-{get|post}-form
                    XII. http-proxy
                    XIII. http-proxy-urlenum
                    XIV. icq
                    XV. imap[s]
                    XVI. irc
                    XVII. ldap2[s]
                    XVIII. ldap3[-{cram|digest}md5][s]
                    XIX. mssql
                    XX. mysql(v4)
                    XXI. mysql5
                    XXII. ncp
                    XXIII. nntp
                    XXIV. oracle
                    XXV. oracle-listener
                    XXVI. oracle-sid
                    XXVII. pcanywhere
                    XXVIII. pcnfs
                    XXIX. pop3[s]
                    XXX. postgres
                    XXXI. rdp
                    XXXII. radmin2
                    XXXIII. redis
                    XXXIV. rexec
                    XXXV. rlogin
                    XXXVI. rpcap
                    XXXVII. rsh
                    XXXVIII. rtsp
                    XXXIX. s7-300
                    XL. sapr3
                    XLI. sip
                    XLII. smb
                    XLIII. smtp[s]
                    XLIV. smtp-enum
                    XLV. snmp
                    XLVI. socks5
                    XLVII. ssh
                    XLVIII. sshkey
                    XLIX. svn
                    L. teamspeak
                    LI. telnet[s]
                    LII. vmauthd
                    LIII. vnc
                    LIV. xmpp

            (II) Syntax:

                $ hydra <`-l` username | `-L` wordlist>  <`-p` Password | `-P` wordlist | `-x` Opt-out> <IP> <Service> <Option Flags?>

                (A) `-C` wordlist of both username and password seperated by a `:`

                    $ cat wordlist.txt
                    admin:123

            (III) Options:

                (A) `-R`: restore a previously aborted session. Requires a hydra.restore file was written. Options are restored, but can be changed by setting them after -R on the command line
                (B) `-S`: connect via SSL
                (C) `-O`: use old SSL v2 and v3
                (D) `-s`: PORT: if the service is on a different default port, define it here
                (E) `-l`: LOGIN

                    I. or `-L` FILE login with LOGIN name, or load several logins from FILE

                (F) `-p` Password

                    I. or `-P` FILE try password PASS, or load several passwords from FILE

                (G) `-x` min:max:charset

                    I. generate passwords from min to max length. charset can contain 1
                    II. for numbers, a for lowcase and A for upcase characters.
                    III. Any other character is added is put to the list.
                        ex:- 1:2:a1%.

                        The generated passwords will be of length 1 to 2 and contain
                        lowcase letters, numbers and/or percent signs and dots.

                (H) `-y` disable use of symbols in -x bruteforce, see above
                (I) `-e` nsr additional checks, "n" for null password, "s" try login as pass, "r" try the reverse login as pass
                (J) `-C` FILE: colon separated "user:password" format, instead of -L/-P options
                (K) `-u`: by default Hydra checks all passwords for one login and then tries the next login. This option loops around the passwords, so the first password is tried on all logins, then the next password.
                (L) `-f`: exit after the first found login/password pair (per host if -M)
                (M) `-F`: exit after the first found login/password pair for any host (for usage with -M)
                (N) `-M` FILE: server list for parallel attacks, one entry per line
                (O) `-o` FILE: write found login/password pairs to FILE instead of stdout
                (P) `-b` FORMAT: specify the format for the `-o` FILE: text(default), json, jsonv1
                (Q) `-t` TASKS: run TASKS number of connects in parallel (default: 16)
                (R) `-m` OPTIONS: module specific options. See hydra -U <module> what options are available.
                (S) `-w` TIME: defines the max wait time in seconds for responses (default: 32)
                (T) `-W` TIME: defines a wait time between each connection a task performs. This usually only makes sense if a low task number is used, .e.g -t 1
                (U) `-c` TIME: the wait time in seconds per login attempt over all threads (-t 1 is recommended) This usually only makes sense if a low task number is used, .e.g -t 1
                (V) `-4` / `-6`: prefer IPv4 (default) or IPv6 addresses
                (W) `-v` / `-V`: verbose mode / show login+pass combination for each attempt

                (X) `-d` debug mode
                (Y) `-I` ignore an existing restore file (don't wait 10 seconds)
                (Z) `-h`, `--help` Show summary of options.

8. Burp Suite

9. Gobuster 

Vunerabilites

10. Telnet

    (i) In Linux-based distributions Telnet could be bypassed by just entering username "root", if not properly Configured

        user@kali~$ telnet 192.168.12.36

        username> root

        root@machine~#

11. FTP

    (i) username "anonymous" let's you login without having an account

    $ ftp
    username: anonymous
    password: 123

12. MariSQL

    (a) username `root` allows us to log into this MariaDB instance without providing a password. 

    $ mysql -u root -h <IP>

13. SQL Injection

    (a) SQL injection can be done if a Website Uses SQL and doesn't properly Sanitize Their User Input such websites are Vunerable to SQL Injections and SQL Injections are done with with simple SQL Query. This doesn't work with Websites that were built properly

    (b) SQL injection String (Any Website that uses SQL and doesn't sanitize user input is vunerable to this):
        
        admin' OR '1'='1' -- 

    